apply Service "disk" {
  import "generic-service"
  import "grafana-disable"
  enable_notifications = 0
  command_endpoint = host.name
  check_command = "disk-status"
  vars.disk_wfree = "20%"
  vars.disk_cfree = "10%"
  assign where host.vars.os == "Linux"
}

apply Service "mounts" {
  import "generic-service"
  import "grafana-disable"
  command_endpoint = host.name
  check_command = "mounts"
  assign where host.vars.os == "Linux" && host.vars.mounts
}

apply Service for (interface => config in host.vars.if_name) {
  vars += config
  import "generic-service"
  command_endpoint = host.name
  check_command = "if-traffic"
  if (match("*.*", interface)) { //VLAN support
    import "grafana-custom"
  } else {
    import "grafana-service"
  }
  display_name = "interface " + interface
  vars.if_name = interface
  ignore where host.vars.ovm_manager
}

apply Service "uptime" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.name
  check_command = "uptime"
  assign where host.vars.os == "Linux"
}

apply Service "uptime" {
  import "generic-service"
  import "grafana-service"
  check_command = "snmp-uptime-perfdata"
  assign where host.vars.os == "Procurve" || host.vars.os == "Powerconnect"
}

apply Service for (secondary_ip => config in host.vars.secondary_ip) {
  import "generic-service"
  import "grafana-disable"
  command_endpoint = host.name
  check_command = "multi-ip"
  vars += config
  vars.secondary_ip = secondary_ip
  display_name = vars.descr + " IP " + secondary_ip
}

apply Service "docker-compose" {
  import "generic-service"
  import "grafana-disable"
  command_endpoint = host.name
  check_command = "docker-compose"
  assign where host.vars.hubbleappserver
}

apply Service "packetfence" {
  import "generic-service"
  import "grafana-disable"
  command_endpoint = host.name
  check_command = "packetfence"
  assign where host.vars.pfserver
}

apply Service "deadlock" {
  import "generic-service"
  import "grafana-disable"
  command_endpoint = host.name
  check_command = "deadlock"
  assign where host.vars.pgsqlserver
}

apply Service "certificate" {
  import "grafana-disable"
  import "generic-service"
  check_command = "ftp-ssl"
  vars.ftp_ssl_url = host.vars.ftpsserver
  assign where host.vars.ftpsserver
}

apply Service for (rest_api => config in host.vars.rest_api) {
  import "generic-service-60min"
  import "grafana-service"
  check_command = "rest_api"
  vars += config
}

apply Service "ipa-certificates" {
  import "grafana-disable"
  import "generic-service"
  command_endpoint = host.name
  check_command = "ipa-certificates"
  assign where host.vars.ipaserver
}

apply Service "ipa-timeskew" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.name
  check_command = "ipa-timeskew"
  assign where host.vars.ipaserver
}

apply Service "zfs-io" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.name
  check_command = "zfs-io"
  assign where host.vars.zfsserver
}
